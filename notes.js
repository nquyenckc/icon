// ===============================
// üìù notes.js - popup ghi ch√∫ (ƒê∆∞·ªùng / ƒê√°) - BlackTea v2.3
// ===============================

function toggleNotePopup(item, btn) {
  // üß† X√°c ƒë·ªãnh ngu·ªìn d·ªØ li·ªáu (currentTable ho·∫∑c hoaDonTam)
  let cartRef = null;
  if (typeof currentTable !== "undefined" && currentTable && currentTable.cart) {
    cartRef = currentTable.cart;
  } else if (typeof hoaDonTam !== "undefined") {
    cartRef = hoaDonTam;
  } else {
    hienThongBao("‚ö†Ô∏è Ch∆∞a c√≥ ƒë∆°n ho·∫∑c b√†n n√†o ƒë∆∞·ª£c ch·ªçn!");
    return;
  }

  // N·∫øu ƒë√£ c√≥ popup c≈© th√¨ remove
  const existing = document.querySelector(".popup-note");
  if (existing) existing.remove();

  // M·∫∑c ƒë·ªãnh: B√¨nh th∆∞·ªùng
  item.sugarLevel = 2;
  item.iceLevel = 3;

  // Giao di·ªán popup
  const popup = document.createElement("div");
  popup.className = "popup-note";
  popup.innerHTML = `
    <div class="popup-row">
      <div class="row-top">
        <label>ƒê·ªô ng·ªçt:</label>
        <span class="slider-label">${getSugarLabels()[item.sugarLevel]}</span>
      </div>
      <input type="range" min="0" max="4" step="1" value="${item.sugarLevel}" class="slider" data-type="sugar">
    </div>

    <div class="popup-row">
      <div class="row-top">
        <label>M·ª©c ƒë√°:</label>
        <span class="slider-label">${getIceLabels()[item.iceLevel]}</span>
      </div>
      <input type="range" min="0" max="3" step="1" value="${item.iceLevel}" class="slider" data-type="ice">
    </div>

    <div class="popup-actions">
      <button class="cancel">‚úñ</button>
      <button class="confirm">‚úî</button>
    </div>
  `;
  document.body.appendChild(popup);
  positionPopupNearButton(popup, btn);

  // üéö C·∫≠p nh·∫≠t slider
  popup.querySelectorAll(".slider").forEach((slider) => {
    slider.addEventListener("input", (e) => {
      const lvl = parseInt(e.target.value);
      const type = e.target.dataset.type;
      const label = e.target
        .closest(".popup-row")
        .querySelector(".slider-label");

      if (type === "sugar") {
        item.sugarLevel = lvl;
        label.textContent = getSugarLabels()[lvl];
      } else if (type === "ice") {
        item.iceLevel = lvl;
        label.textContent = getIceLabels()[lvl];
      }
    });
  });

  // -----------------
  // X·ª≠ l√Ω n√∫t b·∫•m
  popup.addEventListener("click", async (ev) => {
    ev.stopPropagation();

    // ‚ùå H·ªßy
    if (ev.target.classList.contains("cancel")) {
      popup.remove();
      return;
    }

    // ‚úÖ X√°c nh·∫≠n
    if (ev.target.classList.contains("confirm")) {
      const sugarLabel = getSugarLabels()[item.sugarLevel];
      const iceLabel = getIceLabels()[item.iceLevel];
      const isNormalSugar = sugarLabel === "B√¨nh th∆∞·ªùng";
      const isNormalIce = iceLabel === "B√¨nh th∆∞·ªùng";

      // N·∫øu c·∫£ hai ƒë·ªÅu b√¨nh th∆∞·ªùng ‚Üí b·ªè sao, kh√¥ng ghi ch√∫
      if (isNormalSugar && isNormalIce) {
        btn.classList.remove("active");
        const icon = btn.querySelector("i");
        if (icon) {
          icon.classList.remove("fa-solid");
          icon.classList.add("fa-regular");
        }
        popup.remove();
        return;
      }

      // Clone m√≥n ghi ch√∫ (ƒê∆°n ·∫£o)
      const baseQty = cartRef.find((it) => it.id === item.id)?.soluong || 0;
      const noteCount = cartRef.filter(
        (it) => it.id === item.id && it.isNoteOnly
      ).length;
      if (noteCount >= baseQty) {
        hienThongBao(`ƒê√£ ghi ch√∫ ƒë·ªß ${baseQty} ly cho m√≥n "${item.name}"`);
        return;
      }

      // üß© Gi·∫£m 1 ly t·ª´ m√≥n g·ªëc n·∫øu c√≤n
      const goc = cartRef.find((it) => it.id === item.id && !it.isNoteOnly);
      if (goc && goc.soluong > 0) {
        goc.soluong--;
        if (goc.soluong === 0) {
          const idx = cartRef.indexOf(goc);
          if (idx > -1) cartRef.splice(idx, 1);
        }
      }

      // üÜï T·∫°o m√≥n c√≥ ghi ch√∫ g·ªçn, tr√°nh l·∫∑p t√™n
      const newItem = JSON.parse(JSON.stringify(item));
      newItem.isNoteOnly = true;

      // üßπ Lo·∫°i b·ªè ph·∫ßn "(...)" n·∫øu c√≥ trong t√™n c≈©
      let baseName = item.name;
      if (baseName.includes("(")) baseName = baseName.split("(")[0].trim();

      // Ch·ªâ th√™m ph·∫ßn kh√°c ‚ÄúB√¨nh th∆∞·ªùng‚Äù
      const ghiChuParts = [];
      if (!isNormalSugar) ghiChuParts.push(sugarLabel);
      if (!isNormalIce) ghiChuParts.push(iceLabel);

      newItem.note = ghiChuParts.join(", ");
      newItem.name = ghiChuParts.length
        ? `${baseName} (${newItem.note})`
        : baseName;
      newItem.soluong = 1;
      newItem.price = item.price;

      cartRef.push(newItem);

      // ‚≠ê C·∫≠p nh·∫≠t sao (t√¥ ƒë·∫∑c)
      btn.classList.add("active");
      const icon = btn.querySelector("i");
      if (icon) {
        icon.classList.remove("fa-regular");
        icon.classList.add("fa-solid");
      }

      try {
        if (typeof capNhatHoaDon === "function") capNhatHoaDon();
        if (typeof saveAll === "function") await saveAll();
        if (typeof renderTables === "function") renderTables();
      } catch (err) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ghi ch√∫:", err);
      }

      popup.remove();
    }
  });

  // T·ª± ƒë√≥ng khi click ra ngo√†i
  setTimeout(() => {
    document.addEventListener(
      "click",
      function onDocClick(ev) {
        if (!popup.contains(ev.target)) popup.remove();
      },
      { once: true }
    );
  }, 100);
}

// ----------------------
// Helpers
function getSugarLabels() {
  return ["Kh√¥ng ng·ªçt", "√çt ng·ªçt", "B√¨nh th∆∞·ªùng", "Ng·ªçt v·ª´a", "Ng·ªçt nhi·ªÅu"];
}
function getIceLabels() {
  return ["Kh√¥ng ƒë√°", "√çt ƒë√°", "ƒê√° v·ª´a", "B√¨nh th∆∞·ªùng"];
}

// ----------------------
// Helpers
// ----------------------
function getSugarLabels() {
  return ['Kh√¥ng ng·ªçt', '√çt ng·ªçt', 'B√¨nh th∆∞·ªùng', 'Ng·ªçt v·ª´a', 'Ng·ªçt nhi·ªÅu'];
}

function getIceLabels() {
  return ['Kh√¥ng ƒë√°', '√çt ƒë√°', 'ƒê√° v·ª´a', 'B√¨nh th∆∞·ªùng'];
}

function positionPopupNearButton(popup, btn) {
  // üìå L·∫•y v·ªã tr√≠ n√∫t sao
  const rect = btn.getBoundingClientRect();
  const scrollTop = window.scrollY || document.documentElement.scrollTop;
  const scrollLeft = window.scrollX || document.documentElement.scrollLeft;

  // üì¶ ·∫®n popup t·∫°m ƒë·ªÉ ƒëo ƒë√∫ng k√≠ch th∆∞·ªõc m√† kh√¥ng g√¢y reflow
  popup.style.visibility = "hidden";
  popup.style.display = "block";
  const popupWidth = popup.offsetWidth;
  const popupHeight = popup.offsetHeight;
  popup.style.visibility = "";
  popup.style.display = "";

  // üß≠ T√≠nh to√°n v·ªã tr√≠
  let top = rect.bottom + scrollTop + 6;
  const screenHeight = window.innerHeight;
  if (rect.bottom + popupHeight > screenHeight - 10)
    top = rect.top + scrollTop - popupHeight - 6;

  // CƒÉn gi·ªØa popup ngay d∆∞·ªõi n√∫t sao
  let left = rect.left + scrollLeft + rect.width / 2 - popupWidth / 2;
  const screenWidth = window.innerWidth;
  if (left < 6) left = 6;
  if (left + popupWidth > screenWidth - 6)
    left = screenWidth - popupWidth - 6;

  // üß© √Åp d·ª•ng v·ªã tr√≠ cu·ªëi c√πng
  popup.style.position = "absolute";
  popup.style.top = `${top}px`;
  popup.style.left = `${left}px`;
  popup.style.transform = "none"; // b·ªè translateX(-50%) g√¢y rung
  popup.style.transition = "opacity 0.12s ease, transform 0.12s ease";
  popup.style.zIndex = 1000;
}


// ===============================
// üîî Th√¥ng b√°o ng·∫Øn (hi·ªán r·ªìi t·ª± t·∫Øt)
// ===============================
function hienThongBao(noiDung, loai = "thanhcong", thoigian = 2000) {
  const tb = document.createElement("div");
  tb.className = `thong-bao ${loai}`;
  tb.textContent = noiDung;
  document.body.appendChild(tb);

  setTimeout(() => tb.classList.add("hien"), 10);
  setTimeout(() => tb.classList.remove("hien"), thoigian);
  setTimeout(() => tb.remove(), thoigian + 300);
}

// ===============================
// ‚öôÔ∏è H·ªôp x√°c nh·∫≠n (c√≥ n√∫t ƒê·ªìng √Ω / H·ªßy)
// ===============================
function hopXacNhan(noiDung, khiDongY, khiHuy) {
  const hop = document.createElement("div");
  hop.className = "xac-nhan";
  hop.innerHTML = `
    <h3>${noiDung}</h3>
    <div class="nut">
      <button class="dongy">ƒê·ªìng √Ω</button>
      <button class="huy">H·ªßy</button>
    </div>
  `;
  document.body.appendChild(hop);

  hop.querySelector(".dongy").addEventListener("click", () => {
    hop.remove();
    if (khiDongY) khiDongY();
  });

  hop.querySelector(".huy").addEventListener("click", () => {
    hop.remove();
    if (khiHuy) khiHuy();
  });
}


